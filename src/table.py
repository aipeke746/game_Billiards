import pygame
import math

# ==================== 定数 ====================
# ビリヤードテーブルの位置
OUTER_POS = 110
INNER_POS = 200
# ビリヤードテーブルの寸法
OUTER_WIDE = 1450
OUTER_LENGTH = 815
INNER_WIDE = 1270
INNER_LENGTH = 635
# 色
OUTER_COLOR = (115, 66, 41)
INNER_COLOR = (0, 92, 76)
HOLE_COLOR = (0, 0, 0)
WHITE = (255, 255, 255)
# 穴
HOLE_RADIUS = 65 / 2
# 穴の位置のパラメータ
CONNER_HOLE_PRAM = 3 / 10
SIDE_HOLE_PRAM = 13 / 10

# テーブルの座標
TOP_LEFT_2 = [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2), INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2)]
TOP_LEFT_3 = [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2), INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2)]
TOP_LEFT_1 = [INNER_POS, INNER_POS - TOP_LEFT_2[0] + TOP_LEFT_2[1]]
TOP_LEFT_4 = [INNER_POS + TOP_LEFT_3[0] - TOP_LEFT_3[1], INNER_POS]

TOP_CENTER_2 = [INNER_POS + INNER_WIDE/2 - 3/math.sqrt(10) * HOLE_RADIUS, INNER_POS - HOLE_RADIUS * SIDE_HOLE_PRAM - 1/math.sqrt(10) * HOLE_RADIUS]
TOP_CENTER_3 = [INNER_POS + INNER_WIDE/2 + 3/math.sqrt(10) * HOLE_RADIUS, INNER_POS - HOLE_RADIUS * SIDE_HOLE_PRAM - 1/math.sqrt(10) * HOLE_RADIUS]
TOP_CENTER_1 = [(3 * TOP_CENTER_2[0] + TOP_CENTER_2[1] - INNER_POS) / 3, INNER_POS]
TOP_CENTER_4 = [(INNER_POS + 3 * TOP_CENTER_3[0] - TOP_CENTER_3[1]) / 3, INNER_POS]

TOP_RIGHT_2 = [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2), INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2)]
TOP_RIGHT_3 = [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2), INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2)]
TOP_RIGHT_1 = [-1 * INNER_POS + TOP_RIGHT_2[0] + TOP_RIGHT_2[1], INNER_POS]
TOP_RIGHT_4 = [INNER_POS + INNER_WIDE, -1 * (INNER_POS + INNER_WIDE) + TOP_RIGHT_3[0] + TOP_RIGHT_3[1]]

BOTTOM_RIGHT_2 = [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2), INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2)]
BOTTOM_RIGHT_3 = [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2), INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2)]
BOTTOM_RIGHT_1 = [INNER_POS + INNER_WIDE, INNER_POS + INNER_WIDE - BOTTOM_RIGHT_2[0] + BOTTOM_RIGHT_2[1]]
BOTTOM_RIGHT_4 = [INNER_POS + INNER_LENGTH + BOTTOM_RIGHT_3[0] - BOTTOM_RIGHT_3[1], INNER_POS + INNER_LENGTH]

BOTTOM_CENTER_2 = [INNER_POS + INNER_WIDE/2 + 3/math.sqrt(10) * HOLE_RADIUS, INNER_POS + INNER_LENGTH + HOLE_RADIUS * SIDE_HOLE_PRAM]
BOTTOM_CENTER_3 = [INNER_POS + INNER_WIDE/2 - 3/math.sqrt(10) * HOLE_RADIUS, INNER_POS + INNER_LENGTH + HOLE_RADIUS * SIDE_HOLE_PRAM]
BOTTOM_CENTER_1 = [(3 * BOTTOM_CENTER_2[0] + BOTTOM_CENTER_2[1] -1 * (INNER_POS + INNER_LENGTH)) / 3, INNER_POS + INNER_LENGTH]
BOTTOM_CENTER_4 = [(INNER_POS + INNER_LENGTH + 3 * BOTTOM_CENTER_3[0] - BOTTOM_CENTER_3[1]) / 3, INNER_POS + INNER_LENGTH]

BOTTOM_LEFT_2 = [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2), INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM + HOLE_RADIUS / math.sqrt(2)]
BOTTOM_LEFT_3 = [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2), INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM - HOLE_RADIUS / math.sqrt(2)]
BOTTOM_LEFT_1 = [-1 * (INNER_POS + INNER_LENGTH) + BOTTOM_LEFT_2[0] + BOTTOM_LEFT_2[1], INNER_POS + INNER_LENGTH]
BOTTOM_LEFT_4 = [INNER_POS, -1 * INNER_POS + BOTTOM_LEFT_3[0] + BOTTOM_LEFT_3[1]]

# ==================== 関数 ====================
# ビリヤードテーブルの描画
def draw(sc):
    # テーブル
    pygame.draw.rect(sc, OUTER_COLOR, [OUTER_POS, OUTER_POS, OUTER_WIDE, OUTER_LENGTH])
    pygame.draw.polygon(sc, INNER_COLOR, [
            TOP_LEFT_1, TOP_LEFT_2, TOP_LEFT_3, TOP_LEFT_4,
            TOP_CENTER_1, TOP_CENTER_2, TOP_CENTER_3, TOP_CENTER_4,
            TOP_RIGHT_1, TOP_RIGHT_2, TOP_RIGHT_3, TOP_RIGHT_4,
            BOTTOM_RIGHT_1, BOTTOM_RIGHT_2, BOTTOM_RIGHT_3, BOTTOM_RIGHT_4,
            BOTTOM_CENTER_1, BOTTOM_CENTER_2, BOTTOM_CENTER_3, BOTTOM_CENTER_4,
            BOTTOM_LEFT_1, BOTTOM_LEFT_2, BOTTOM_LEFT_3, BOTTOM_LEFT_4])
    # 穴（コーナー）
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM, INNER_POS-HOLE_RADIUS * CONNER_HOLE_PRAM], HOLE_RADIUS)
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM, INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM], HOLE_RADIUS)
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS - HOLE_RADIUS * CONNER_HOLE_PRAM, INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM], HOLE_RADIUS)
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS + INNER_WIDE + HOLE_RADIUS * CONNER_HOLE_PRAM, INNER_POS + INNER_LENGTH + HOLE_RADIUS * CONNER_HOLE_PRAM], HOLE_RADIUS)
    # 穴（サイド）
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS + INNER_WIDE/2, INNER_POS - HOLE_RADIUS * SIDE_HOLE_PRAM], HOLE_RADIUS)
    pygame.draw.circle(sc, HOLE_COLOR, [INNER_POS + INNER_WIDE/2, INNER_POS + INNER_LENGTH + HOLE_RADIUS * SIDE_HOLE_PRAM], HOLE_RADIUS)
